set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/syntastic'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rodjek/vim-puppet'
Bundle 'godlygeek/tabular'
Bundle 'altercation/vim-colors-solarized'
Bundle 'tpope/vim-fugitive'
Bundle 'jdonaldson/vaxe'
Bundle 'Shougo/neocomplcache.vim'
Bundle 'majutsushi/tagbar'
Bundle 'bling/vim-airline'
Bundle 'mileszs/ack.vim'
Bundle 'kchmck/vim-coffee-script'

Bundle 'vim-scripts/BusyBee'
Bundle 'djjcast/mirodark'
Bundle 'ciaranm/inkpot'
Bundle 'w0ng/vim-hybrid'
Bundle 'vim-scripts/darktango.vim'
Bundle 'nanotech/jellybeans.vim'
Bundle '29decibel/codeschool-vim-theme'
Bundle 'sickill/vim-monokai'
Bundle 'vim-scripts/twilight'
Bundle 'vim-scripts/phd'
Bundle 'tomasr/molokai'

set guifont=GohuFont-Medium:h14
set laststatus=2
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=%F

filetype plugin indent on

filetype on
syntax on
filetype plugin on

let g:syntastic_python_checkers=['flake8']
let g:syntastic_puppet_checkers=['puppetlint']

let mapleader=","

syntax enable
if has('gui_running')
    set background=light
else
    set background=dark
endif
colorscheme jellybeans

" Formatting
set nu
set ruler
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set showcmd
set history=50
set autoindent
set copyindent
set backspace=indent,eol,start
set smartindent

" Folding
set foldcolumn=6
set foldmethod=indent
set foldlevel=99
set foldnestmax=10
set foldenable

" Remove trailing whitespace
nnoremap <F5> :%s/\s\+$//<CR>

" Toggle spell check
map <leader>s :set spell! spelllang=en_us<CR>

" Toggle search highlighting
set hlsearch
noremap <F4> :set hlsearch! hlsearch?<CR>

" Easy newlines in normal mode
nnoremap <S-Return> O<Esc>
nnoremap <CR> o<Esc>

" Filetype settings
filetype indent on
au FileType xhtml,html,htm,php,xml,ruby setlocal tabstop=2
au FileType xhtml,html,htm,php,xml,ruby setlocal shiftwidth=2
au FileType xhtml,html,htm,php,xml,ruby setlocal softtabstop=2
au FileType python setlocal tabstop=2
au FileType python setlocal shiftwidth=2
au FileType python setlocal softtabstop=2

au FileType c,h,java,js setlocal mps+==:;

au BufRead,BufNewFile *.scala set filetype=scala
au! Syntax scala source /usr/share/vim/addons/syntax/scala.vim

""""" Plugin stuff """""

""" airline
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'

""" NERDTree
map <leader>e :NERDTreeToggle<CR>
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeShowHidden=1

""" ctrl-p
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_show_hidden=1

""" tagbar
nmap <F8> :TagbarToggle<CR>

""" neocomplcache

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
